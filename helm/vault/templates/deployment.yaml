apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: {{ .Release.Namespace }}
  name: secret-reader
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["update", "get","list","create","delete","patch"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: read-secrets
  namespace: {{ .Release.Namespace }}
subjects:
- kind: ServiceAccount
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: secret-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: role-tokenreview-binding-{ .Release.Namespace }}
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: vault

  labels:
    kubernetes.io/cluster-service: "true"
spec:
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app: vault
        k8s-app: vault
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      serviceAccountName: {{ .Release.Name }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "k8s-app"
                    operator: In
                    values:
                    - vault
              topologyKey: "kubernetes.io/hostname"
      volumes:
        - name: certs
          secret:
            secretName: vaultssl
        - name: vaultserviceaccount
          secret:
            secretName: vaultserviceaccount
      containers:
      - name: vaultinit
        image: "{{ .Values.init.repository }}/{{ .Values.init.prefix }}:{{ .Values.init.tag }}"
        imagePullPolicy: Always
        restartPolicy: Never
        env:
          - name: "NAMESPACE"
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace

      - name: vault
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        args: ["server" , "-log-level=debug" ]
        ports:
          - containerPort: 8200
        livenessProbe:
          # Alive if it is listening for clustering traffic
          tcpSocket:
            port: {{ .Values.service.port }}
        readinessProbe:
          tcpSocket:
            port: {{ .Values.service.port }}
        env:
          - name: VAULT_LOCAL_CONFIG
            value: 'storage "gcs" {
                             bucket = "{{ .Release.Namespace }}-vault-storage"
                             disable_registration = "true"
                             ha_enabled = "true"
                             redirect_addr = "https://vault.{{ .Release.Namespace }}.svc"
                             cluster_addr = "https://vaultcluster.{{ .Release.Namespace }}.svc.cluster.local:8201"
                             tls_ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
                             tls_cert_file = "/etc/ssl/vault/tls.crt"
                             tls_key_file = "/etc/ssl/vault/tls.key"
                             }
                    listener "tcp" {
                            address = "0.0.0.0:8200"
                            cluster_address = "0.0.0.0:8201"
                            tls_cert_file = "/etc/ssl/vault/tls.crt"
                            tls_key_file = "/etc/ssl/vault/tls.key"
                            tls_disable_client_certs = "true"
                            }
                    ui = "true"
                   '
          - name: "NAMESPACE"
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
            {{- range $key, $value := .Values.envvars }}
          - name:  {{ $key }}
            value: {{ $value | quote }}
            {{- end }}
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: /config/vaultsa/credentials.json
        volumeMounts:
        - name: certs
          mountPath: /etc/ssl/vault
          readOnly: true
        - name: vaultserviceaccount
          mountPath: /config/vaultsa/
          readOnly: true
        securityContext:
          capabilities:
            add:
              - IPC_LOCK
        resources:
          limits:
            cpu: {{ .Values.resources.limits.cpu }}
          requests:
            cpu: {{ .Values.resources.requests.cpu }}
      imagePullSecrets:
      - name: registrykey
